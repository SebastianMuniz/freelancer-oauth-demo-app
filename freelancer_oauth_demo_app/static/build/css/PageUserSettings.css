/* Settings Page */
.TabLink {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.43;
  display: block;
  padding: 10px 18px;
}
.TabLink:hover {
  color: #34b5e8;
  text-decoration: none;
}
.TabLink.is-TabLink-selected {
  background: #139ff0;
  border: 1px solid #0087e0;
  color: #F7F7F7;
  font-weight: 700;
  text-shadow: 0 -1px transparent;
}
body {
  background-color: #F0F0F0;
}
.SectionSettings {
  margin-top: 40px;
}
.SectionSettings-inner {
  width: 960px;
  min-width: 960px;
  margin: 0 auto;
  padding-left: 20px;
  padding-right: 20px;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
}

@media (min-width: 1000px) {
  html:not(.is-responsive) .SectionSettings-inner {
    padding-left: 0;
    padding-right: 0;
  }
}
@media (min-width: 960px) {
  html.is-responsive .SectionSettings-inner {
    width: 100%;
    max-width: 1176px;
  }
}
@media (min-width: 1216px) {
  html.is-responsive .SectionSettings-inner {
    padding-left: 0;
    padding-right: 0;
  }
}
html.is-mobile-first .SectionSettings-inner {
  width: 100%;
  min-width: 0;
  max-width: 1176px;
}
html.is-mobile-first:not(.is-responsive) .SectionSettings-inner {
  padding-left: 20px;
  padding-right: 20px;
}
.SectionSettings-nav {
  -ms-flex-negative: 0;
      flex-shrink: 0;
  width: 240px;
  margin-right: 20px;
}
.SectionSettings-nav-item {
  margin-bottom: 5px;
}
.SectionSettings-nav-item:hover {
  cursor: pointer;
}
.SectionSettings-main {
  -ms-flex-positive: 1;
      flex-grow: 1;
      margin-bottom: 40px;
}
.SectionSettings-main-header {
  padding: 32px;
  border-bottom: 1px solid #DEDEDE;
  text-align: center;
}
.SectionSettings-main-title {
  color: #222;
  font-size: 34px;
  font-size: 2.125rem;
  line-height: 1.18;
  margin-bottom: 20px;
}
.SectionSettings-main-text {
  color: #333;
  font-size: 17px;
/*  font-size: 1.25rem; */
  padding: 0 10%;
}
.SectionSettings-main-body {
  padding: 20px 32px;
  border-bottom: 1px solid #DEDEDE;
}
.SectionSettings-main-subTitle {
  color: #333;
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1.33;
  margin: 12px 0;
}
.SectionSettings-main-table {
  color: #444;
}
.SectionSettings-main-row {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  min-height: 30px;
  margin-bottom: 12px;
  padding: 8px 0;
}
.SectionSettings-main-row:last-child {
  border-bottom: 0;
}
.SectionSettings-main-rowTop {
  border-bottom: 1px solid #444;
}
.SectionSettings-main-desc {
  color: #333;
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.43;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  width: 25%;
  margin-right: 60px;
  font-weight: bold;
}
.SectionSettings-main-desc:only-child {
  font-size: 19px;
  font-size: 1.1875rem;
  line-height: 1.47;
}
.SectionSettings-main-value {
  -ms-flex-positive: 1;
      flex-grow: 1;
  word-break: break-word;
}
.SectionSettings-main-value.form-step {
  padding-bottom: 0;
}
.SectionSettings-main-final {
  -ms-flex-negative: 1;
      flex-shrink: 1;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  word-break: break-word;
}
.SectionSettings-main-titleTable {
  color: #333;
  margin-bottom: 0;
}
.SectionSettings-main-final.form-step {
  padding-bottom: 0;
}
.SectionSettings-main-cta {
  margin-left: auto;
}
.SectionSettings-main-app,
.SectionSettings-main-users {
  margin-bottom: 24px;
  border-bottom: 1px solid #DEDEDE;
}

.Icon--transparent {
  fill: transparent;
}

.fl-form .AdvancedScopes-Label {
  font-weight: normal;
}

/*# sourceMappingURL=data:application/json;base64, */
